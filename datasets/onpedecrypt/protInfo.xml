
<!-- ATTENTION! WE STRONGLY ADVICE AGAINST EDITING THIS FILE!
     
     This is a protocol information file. It contains all the parameters 
     of a protocol session as agreed by all parties.
     
     Each party must hold an identical copy of this file. WE RECOMMEND 
     YOU TO NOT EDIT THIS FILE UNLESS YOU KNOW EXACTLY WHAT YOU ARE 
     DOING.
     
     Many XML features are disabled and throw errors, so parsing is more 
     restrictive than the schema implies. -->

<protocol>

   <!-- Version of Verificatum Software for which this info is intended. -->
   <version>3.1.0</version>

   <!-- Session identifier of this protocol execution. This must be 
        globally unique and satisfy the regular expression [A-Za-z][A-Za-z0-
        9]{1,1023}. -->
   <sid>ONPE</sid>

   <!-- Name of this protocol execution. This is a short descriptive name 
        that is NOT necessarily unique, but satisfies the regular 
        expression [A-Za-z][A-Za-z0-9_ ]{1,255}. -->
   <name>Eleccion Onpe</name>

   <!-- Description of this protocol execution. This is merely a longer 
        description than the name of the protocol execution. It must 
        satisfy the regular expression |[A-Za-z][A-Za-z0-9:;?!.()\[\] ]
        {0,4000}. -->
   <descr></descr>

   <!-- Number of parties taking part in the protocol execution. This must 
        be a positive integer that is at most 25. -->
   <nopart>1</nopart>

   <!-- Statistical distance from uniform of objects sampled in protocols 
        or in proofs of security. This must be a non-negative integer at 
        most 256. -->
   <statdist>100</statdist>

   <!-- Name of bulletin board implementation used, i.e., a subclass of com.
        verificatum.protocol.com.BullBoardBasic. WARNING! This field is not 
        validated syntactically. -->
   <bullboard>com.verificatum.protocol.com.BullBoardBasicHTTPW</bullboard>

   <!-- Threshold number of parties needed to violate the privacy of the 
        protocol, i.e., this is the number of parties needed to decrypt. 
        This must be positive, but at most equal to the number of parties. 
        -->
   <thres>1</thres>

   <!-- Group over which the protocol is executed. An instance of a 
        subclass of com.verificatum.arithm.PGroup. -->
   <pgroup>ECqPGroup(P-256)::00000000020100000020636f6d2e766572696669636174756d2e61726974686d2e4543715047726f75700100000005502d323536</pgroup>

   <!-- Width of El Gamal keys. If equal to one the standard El Gamal 
        cryptosystem is used, but if it is greater than one, then the 
        natural generalization over a product group of the given width is 
        used. This corresponds to letting each party holding multiple 
        standard public keys. -->
   <keywidth>1</keywidth>

   <!-- Bit length of challenges in interactive proofs. -->
   <vbitlen>128</vbitlen>

   <!-- Bit length of challenges in non-interactive random-oracle proofs. 
        -->
   <vbitlenro>256</vbitlenro>

   <!-- Bit length of each component in random vectors used for batching. 
        -->
   <ebitlen>128</ebitlen>

   <!-- Bit length of each component in random vectors used for batching in 
        non-interactive random-oracle proofs. -->
   <ebitlenro>256</ebitlenro>

   <!-- Pseudo random generator used to derive random vectors for 
        batchingfrom jointly generated seeds. This can be "SHA-256", "SHA-
        384", or "SHA-512", in which case com.verificatum.crypto.
        PRGHeuristic is instantiated based on this hashfunction, or it can 
        be an instance of com.verificatum.crypto.PRG. WARNING! This field 
        is not validated syntactically. -->
   <prg>SHA-256</prg>

   <!-- Hashfunction used to implement random oracles. It can be one of the 
        strings "SHA-256", "SHA-384", or "SHA-512", in which case com.
        verificatum.crypto.HashfunctionHeuristic is instantiated, or an 
        instance of com.verificatum.crypto.Hashfunction. Random oracles 
        with various output lengths are then implemented, using the given 
        hashfunction, in com.verificatum.crypto.RandomOracle.
        WARNING! Do not change the default unless you know exactly what you 
        are doing. This field is not validated syntactically. -->
   <rohash>SHA-256</rohash>

   <!-- Determines if the proofs of correctness of an execution are 
        interactive or non-interactive. Legal valus are "interactive" or 
        "noninteractive". -->
   <corr>noninteractive</corr>

   <!-- Default width of ciphertexts processed by the mix-net. A different 
        width can still be forced for a given session by using the "-width" 
        option. -->
   <width>1</width>

   <!-- Maximal number of ciphertexts for which precomputation is 
        performed. Pre-computation can still be forced for a different 
        number of ciphertexts for a given session using the "-maxciph" 
        option during pre-computation. -->
   <maxciph>0</maxciph>

   <party>

      <!-- Name of party. This must satisfy the regular expression [A-Za-z][A-
           Za-z0-9_ ]{1,255}. -->
      <name>Servidor01</name>

      <!-- Sorting attribute used to sort parties with respect to their roles 
           in the protocol. This is used to assign roles in protocols where 
           different parties play different roles. -->
      <srtbyrole>anyrole</srtbyrole>

      <!-- Description of this party. This is merely a longer description 
           than the name of the party. It must satisfy the regular expression 
           |[A-Za-z][A-Za-z0-9:;?!.()\[\] ]{0,4000}. -->
      <descr></descr>

      <!-- Public signature key (instance of subclasses of com.verificatum.
           crypto.SignaturePKey). WARNING! This field is not validated 
           syntactically. -->
      <pkey>com.verificatum.crypto.SignaturePKeyHeuristic(RSA, bitlength=2048)::0000000002010000002d636f6d2e766572696669636174756d2e63727970746f2e5369676e6174757265504b65794865757269737469630000000002010000012630820122300d06092a864886f70d01010105000382010f003082010a0282010100ab09b30f2805471fb7e27136c7618bffb6399d43dccd80c4a791cc877afb2a27dac4220fa95abb8be5f0a6232765bd1c3e1adcfb2a27fe5c2ef2c97fe08d01793dbcdfc04efd35cd4427516d2a771424581bc7ffe735f7439564eb5102558dfc67b7339492cf87245e80b225c08dbb05e40a63a6e3b4379ea69c60631a0f3f8d4e3efacd7867c90762e821da57a839326c0fcd7d751e723e53306c1ecbd344759883f83d8c44da5f20bc96aec77d7420ad6c2e64ecca538ade3fd3db1902e383c59c708bd226d8b0ca5293d8a1c37d270980b1b70439ff392fac38a036e245b3c5cee55d1528d4b9e2c1f12398b7738e7ed75a41207e37ae5381dad252d1fa490203010001010000000400000800</pkey>

      <!-- URL to the HTTP server of this party. -->
      <http>http://localhost:8041</http>

      <!-- Socket address given as <hostname>:<port> or <ip address>:<port> 
           to our hint server. A hint server is a simple UDP server that 
           reduces latency and traffic on the HTTP servers. -->
      <hint>localhost:4041</hint>

   </party>

</protocol>

